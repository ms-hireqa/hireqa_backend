from pydantic import BaseModel, EmailStr, Field, validator
from typing import Optional
from datetime import date

class JobSeekerSignup(BaseModel):
    # Remove id field since candidate_id is auto-generated by database
    first_name: str
    middle_name: Optional[str] = ""
    last_name: str
    email_id: EmailStr  # Maps to 'email' column in database
    phone_number: str  # Must be exactly 10 digits - validated by @validator below
    accepted_terms_policy: bool  # Maps to 'accepted_TandC' column
    password: str  # Plaintext for validation; will be hashed before insert
    username: str
    gender: str  # Will be stored in jobseeker_personal_details table (enum type)
    location: str  # Maps to 'current_job_location' column
    dob: date  # Will be stored in jobseeker_personal_details table as DOB (date type)
    role_type: str  # Should match enum values in Supabase (enum type)
    
    @validator('phone_number')
    def validate_phone_number(cls, v):
        if not v.isdigit() or len(v) != 10:
            raise ValueError('Phone number must be exactly 10 digits')
        return v
    
    @validator('gender')
    def validate_gender(cls, v):
        # Add your gender enum values here based on your Supabase enum
        allowed_genders = ['Male', 'Female', 'Other', 'Prefer not to say']
        if v not in allowed_genders:
            raise ValueError(f'Gender must be one of: {", ".join(allowed_genders)}')
        return v

    class Config:
        schema_extra = {
            "example": {
                "first_name": "John",
                "middle_name": "",
                "last_name": "Doe", 
                "email_id": "john.doe@example.com",
                "phone_number": "1234567890",
                "accepted_terms_policy": True,
                "password": "StrongPass123!",
                "username": "johndoe",
                "gender": "Male",
                "location": "New York",
                "dob": "1990-01-01",
                "role_type": "Full-time"
            }
        }
